#! /usr/bin/env bash
set -e -u

declare -r SCRIPT_CMD="$0"
declare -r SCRIPT_PATH=$(readlink -f "$0")
declare -r SCRIPT_DIR=$(cd $(dirname "$0") && pwd)

declare -r RED='\e[31m'
declare -r GREEN='\e[32m'
declare -r YELLOW='\e[33m'
declare -r BLUE='\e[34m'
declare -r MAGENTA='\e[35m'
declare -r CYAN='\e[36m'
declare -r WHITE='\e[37m'
declare -r BOLD='\e[1m'
declare -r NORMAL='\e[0m'

run() {
    echo "Executing: $@"
    ${DRY_RUN:-false} || {
        $@
        return $?
    }
    return 0
}

log_error() {
    echo -e "$RED${BOLD}ERROR:$NORMAL" "$@"
}

log_warning() {
    echo -e "${RED}WARNING:$NORMAL" "$@"
}

log_info() {
    echo -e "${BLUE}INFO:$NORMAL" "$@"
}

debug.print_callstack() {
    local i=0;
    local cs_frames=${#BASH_SOURCE[@]}

    echo "--------------------------------------------------"
    echo "Traceback ... "
    for (( i=$cs_frames - 1; i >= 2; i-- )); do
        local cs_file=${BASH_SOURCE[i]}
        local cs_fn=${FUNCNAME[i]}
        local cs_line=${BASH_LINENO[i-1]}

        # extract the line from the file
        local line=$(sed -n "${cs_line}{s/^ *//;p}" "$cs_file")

        echo -e "  $cs_file[$cs_line]:" \
            "$cs_fn:\t" \
            "$line"
    done
    echo "--------------------------------------------------"
}

# on_exit_handler <exit-value>
_on_exit_handler() {
    # store the script exit code to be used later
    __init_script_exit_code=${1:-0}

    # print callstack
    test $__init_script_exit_code -eq 0 || debug.print_callstack

    echo "Exit cleanup ... ${__init_exit_todo_list[@]} "
    for cmd in "${__init_exit_todo_list[@]}" ; do
        echo "    running: $cmd"
        # run commands in a subshell so that the failures
        # can be ignored
        ($cmd) || {
            local cmd_type=$(type -t $cmd)
            local cmd_text="$cmd"
            local failed="FAILED"
            echo "    $cmd_type: $cmd_text - $failed to execute ..."
        }
    done
}

on_exit() {
    local cmd="$*"

    local n=${#__init_exit_todo_list[*]}
    if [[ $n -eq 0 ]]; then
        trap '_on_exit_handler $?' EXIT
        __init_exit_todo_list=("$cmd")
    else
        __init_exit_todo_list=("$cmd" "${__init_exit_todo_list[@]}") #execute in reverse order
    fi
}
# .....................................


is_function() {
    local method=$1; shift
    [[ $(type -t $method) == "function" ]]
    return $?
}

print_usage() {
    local cmds=( $(declare -F -p | cut -f3 -d ' ' |
        grep '^vm\.' | cut -f2 -d.))


    read -r -d '' help <<-EOF_HELP || true
Usage:
    $( basename $0) $BLUE${BOLD}<command>$NORMAL [args...]
    $( basename $0)  -h|--help

$BOLD${BLUE}Commands: $NORMAL
$(printf "   %s\n" ${cmds[@]})

EOF_HELP

    echo -e "$help"
    return 0
}

usage() {
    local exit_val=${1:-1}

    if [[ $exit_val -eq 0 ]]; then
        print_usage
    else
        print_usage  >&2
    fi
    # use stdout if exit value is 0 else stderr
    exit $exit_val
}

parse_args() {
    ### while there are args parse them
    while [[ -n "${1+xxx}" ]]; do
        case $1 in
        -h|--help)  SHOW_USAGE=true;   break ;;    # exit the loop
        --dry-run)  DRY_RUN=true; shift ;;
        *) shift
        esac
    done
    return 0
}



vm.clone() {
    #TODO: validations:
    #  - is the vm already running
    #  - is the file already there
    #  -  --force option (maybe)
    local from_vm=$1; shift
    local clone=$1; shift

    local src_img=$(virsh dumpxml $from_vm | grep file= | cut -f2 -d "'")
    test -r $src_img || {
        log_error "Unable to open image at: $src_img"
        exit 1;
    }

    local img_dir=$(dirname $src_img)

    log_info "Making a cow clone of $src_img"
    run qemu-img create -f qcow2 \
        -b "$src_img" -o backing_fmt=qcow2 \
        "$img_dir/$clone.qcow2"
    run virt-clone --connect qemu:///system  \
        --original=$from_vm   --name=$clone \
        --file="$img_dir/${clone}.qcow2" --preserve-data

    virsh list --all
    virsh start  $clone
    ### TODO: fix this
    log_info "Try 'vm ip $clone' once the machine boots"
}

vm.destroy() {
    local vm_name=$1; shift
    virsh list --all | grep -q $vm_name  || {
        log_error "No such vm: $vm_name"
        exit 1
    }

    virsh destroy $vm_name || true
    local images=$(virsh  domblklist $vm_name | tail -n +3 |
                     awk '{print $2}' | grep '^/' )
    virsh undefine $vm_name
    rm -f $images
}

vm.ip() {
    local vm_name=$1; shift

    for mac in $(virsh domiflist  $vm_name |
            grep -o -E "([0-9a-f]{2}:){5}([0-9a-f]{2})") ; do
        arp -n | grep $mac  | cut -f1 -d ' '
    done
}


main() {
    local DRY_RUN=false
    local SHOW_USAGE=false

    test $# -eq 0 && usage 1

    parse_args
    $SHOW_USAGE && usage

    local cmd="vm.$1"; shift
    echo $(is_function $cmd)
    is_function $cmd || usage 1
    is_function "${cmd}.parse" && "${cmd}.parse" $@
    is_function "${cmd}.validate" && "${cmd}.validate"

    $cmd "$@"
    return 0
}

main "$@"
